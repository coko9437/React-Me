250807
yarn create vite ch04-vite-test --template react


# 함수형 컴포넌트 (Function Component)
const MyComponent = ({ name }) => { 	// function() 처럼 사용
  return <div>Hello, {name}</div>;
};

# 클래스형 컴포넌트 (Class Component)
class MyComponent extends React.Component { // class 파일명
  render() {
    return <div>Hello, {this.props.name}</div>;	// this.props. 로 접근
  }
}


# props
 -> 부모 컴포넌트가 자식 컴포넌트에게 데이터를 전달하는 방법
 예시) <MyComponent name="추교문" />

 - 함수형에서 : { name }
 - 클래스형에서 : props.name

# children
: 컴포넌트 태그 사이에 직접 작성한 내용
 <MyComponent name="추교문3">
  	여기는 children입니다!
  </MyComponent>

=> 자식 컴포넌트인 MyComponent 내부에서 props.children으로 사용 가능
const MyComponent = ({ name, children }) => {
  return (
    <>
      <div>이름: {name}</div>
      <div>children 값: {children}</div>
    </>
  );
};

### 요약 정리
용어			의미
부모 컴포넌트		다른 컴포넌트를 포함한 컴포넌트 (예: App.jsx)
자식 컴포넌트		부모에 의해 사용되는 컴포넌트 (예: MyComponent.jsx)
함수형 컴포넌트		함수로 정의한 컴포넌트 (const 컴포넌트 = () => {})
클래스형 컴포넌트		클래스로 정의하고 render()로 반환하는 컴포넌트
props			부모 → 자식에게 전달하는 데이터 (속성)
children			<컴포넌트>
				"여기 내용(children)"
			</컴포넌트>

항목			의미
props			부모 → 자식에게 전달하는 외부 데이터
state			컴포넌트 내부에서 관리하는 변화하는 데이터
constructor(props)		컴포넌트가 생성될 때 처음 한 번 실행되는 생성자 함수
this.state = {}		state의 초기값 설정
this.setState()		state를 바꾸는 함수 → 화면 자동 업데이트됨
render()			화면에 보여질 JSX 반환 (state가 바뀌면 다시 호출됨)

# state(.setState) vs useState
-> 
setState (class형) vs useState (함수형)는 state를 바꾸는 방법의 차이
